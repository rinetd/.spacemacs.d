(setq zhexuany-leetcode-packages
      '(
        request
        json))

(defun zhexuany-leetcode/init-json ()
  (require 'json))


(defun zhexuany-leetcode/init-request()
  (require 'request))

(eval-when-compile (require 'cl))

(defconst leetcode-base-domain "leetcode.com")
(defconst leetcode-base-url (concat "https://" leetcode-base-domain))
(defconst leetcode-action-login "acounts/login/")
(defconst leetcode-action-logout "accounts/logout/")

(defconst leetcode-request-header
  `(("Referer" . ,leetcode-base-url)
    ("Host" . ,leetcode-base-domain)
    ("User-Agent" . "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0")))
(defconst leetcode-login-request-header
    `(("Referer" . ,(concat leetcode-base-url "/" leetcode-action-login))
      ("Origin" . ,leetcode-base-url)
      ;; ("Upgrade-Insecure-Requests" . "1")
      ("User-Agent" . "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0")))


(defconst leetcode-csrf-key  "csrfmiddlewaretoken")
(defconst leetcode-csrf-cookie-key "csrftoken")
(defconst leetcode-quest-cleaner "\\(\\[\[^\\]+?\]\s\\)")
(defconst leetcode-status-map
  '((10 "AC" )
    (11 "WA" )
    (12 "MLE" )
    (13 "OLE" )
    (14 "TLE" )
    (15 "RE" )
    (16 "IE" )
    (20 "CE" )
    (21 "UE" )))
(defvar leetcode-default-lang "java" "Your prefered programming language.")

(defvar *leetcode-last-submission-id* nil)

;;; url-retrieve is good at dealing with cookie
(setq request-backend 'url-retrieve)


(defun leetcode--file-to-string (file)
  "Read the content of FILE and return it as a string."
  (with-temp-buffer
    (insert-file-contents file)
    (buffer-string)))

(defun leetcode--get-cookie-val (key)
  "Get cookie value by KEY."
  (cdr
   (assoc
    key
    (request-cookie-alist
     leetcode-base-domain "/" t))))

(defconst leetcode-quests '(
                            ("[Easy] /problems/merge-two-sorted-lists/" 21)
                            ("[Medium] /problems/generate-parentheses/" 22)
                            ("[Hard] /problems/merge-k-sorted-lists/" 23)
                            ("[Easy] /problems/swap-nodes-in-pairs/" 24)
                            ("[Hard] /problems/reverse-nodes-in-k-group/" 25)
                            ("[Easy] /problems/remove-duplicates-from-sorted-array/" 26)
                            ("[Easy] /problems/remove-element/" 27)
                            ("[Easy] /problems/implement-strstr/" 28)
                            ("[Medium] /problems/divide-two-integers/" 29)
                            ("[Hard] /problems/substring-with-concatenation-of-all-words/" 30)
                            ("[Medium] /problems/next-permutation/" 31)
                            ("[Hard] /problems/longest-valid-parentheses/" 32)
                            ("[Hard] /problems/search-in-rotated-sorted-array/" 33)
                            ("[Medium] /problems/search-for-a-range/" 34)
                            ("[Medium] /problems/search-insert-position/" 35)
                            ("[Easy] /problems/valid-sudoku/" 36)
                            ("[Hard] /problems/sudoku-solver/" 37)
                            ("[Easy] /problems/count-and-say/" 38)
                            ("[Medium] /problems/combination-sum/" 39)
                            ("[Medium] /problems/combination-sum-ii/" 40)
                            ("[Hard] /problems/first-missing-positive/" 41)
                            ("[Hard] /problems/trapping-rain-water/" 42)
                            ("[Medium] /problems/multiply-strings/" 43)
                            ("[Hard] /problems/wildcard-matching/" 44)
                            ("[Hard] /problems/jump-game-ii/" 45)
                            ("[Medium] /problems/permutations/" 46)
                            ("[Medium] /problems/permutations-ii/" 47)
                            ("[Medium] /problems/rotate-image/" 48)
                            ("[Medium] /problems/anagrams/" 49)
                            ("[Medium] /problems/powx-n/" 50)
                            ("[Hard] /problems/n-queens/" 51)
                            ("[Hard] /problems/n-queens-ii/" 52)
                            ("[Medium] /problems/maximum-subarray/" 53)
                            ("[Medium] /problems/spiral-matrix/" 54)
                            ("[Medium] /problems/jump-game/" 55)
                            ("[Hard] /problems/merge-intervals/" 56)
                            ("[Hard] /problems/insert-interval/" 57)
                            ("[Easy] /problems/length-of-last-word/" 58)
                            ("[Medium] /problems/spiral-matrix-ii/" 59)
                            ("[Medium] /problems/permutation-sequence/" 60)
                            ("[Medium] /problems/rotate-list/" 61)
                            ("[Medium] /problems/unique-paths/" 62)
                            ("[Medium] /problems/unique-paths-ii/" 63)
                            ("[Medium] /problems/minimum-path-sum/" 64)
                            ("[Hard] /problems/valid-number/" 65)
                            ("[Easy] /problems/plus-one/" 66)
                            ("[Easy] /problems/add-binary/" 67)
                            ("[Hard] /problems/text-justification/" 68)
                            ("[Medium] /problems/sqrtx/" 69)
                            ("[Easy] /problems/climbing-stairs/" 70)
                            ("[Medium] /problems/simplify-path/" 71)
                            ("[Hard] /problems/edit-distance/" 72)
                            ("[Medium] /problems/set-matrix-zeroes/" 73)
                            ("[Medium] /problems/search-a-2d-matrix/" 74)
                            ("[Medium] /problems/sort-colors/" 75)
                            ("[Hard] /problems/minimum-window-substring/" 76)
                            ("[Medium] /problems/combinations/" 77)
                            ("[Medium] /problems/subsets/" 78)
                            ("[Medium] /problems/word-search/" 79)
                            ("[Medium] /problems/remove-duplicates-from-sorted-array-ii/" 80)
                            ("[Medium] /problems/search-in-rotated-sorted-array-ii/" 81)
                            ("[Medium] /problems/remove-duplicates-from-sorted-list-ii/" 82)
                            ("[Easy] /problems/remove-duplicates-from-sorted-list/" 83)
                            ("[Hard] /problems/largest-rectangle-in-histogram/" 84)
                            ("[Hard] /problems/maximal-rectangle/" 85)
                            ("[Medium] /problems/partition-list/" 86)
                            ("[Hard] /problems/scramble-string/" 87)
                            ("[Easy] /problems/merge-sorted-array/" 88)
                            ("[Medium] /problems/gray-code/" 89)
                            ("[Medium] /problems/subsets-ii/" 90)
                            ("[Medium] /problems/decode-ways/" 91)
                            ("[Medium] /problems/reverse-linked-list-ii/" 92)
                            ("[Medium] /problems/restore-ip-addresses/" 93)
                            ("[Medium] /problems/binary-tree-inorder-traversal/" 94)
                            ("[Medium] /problems/unique-binary-search-trees-ii/" 95)
                            ("[Medium] /problems/unique-binary-search-trees/" 96)
                            ("[Hard] /problems/interleaving-string/" 97)
                            ("[Medium] /problems/validate-binary-search-tree/" 98)
                            ("[Hard] /problems/recover-binary-search-tree/" 99)
                            ("[Easy] /problems/same-tree/" 100)
                            ("[Easy] /problems/symmetric-tree/" 101)
                            ("[Easy] /problems/binary-tree-level-order-traversal/" 102)
                            ("[Medium] /problems/binary-tree-zigzag-level-order-traversal/" 103)
                            ("[Easy] /problems/maximum-depth-of-binary-tree/" 104)
                            ("[Medium] /problems/construct-binary-tree-from-preorder-and-inorder-traversal/" 105)
                            ("[Medium] /problems/construct-binary-tree-from-inorder-and-postorder-traversal/" 106)
                            ("[Easy] /problems/binary-tree-level-order-traversal-ii/" 107)
                            ("[Medium] /problems/convert-sorted-array-to-binary-search-tree/" 108)
                            ("[Medium] /problems/convert-sorted-list-to-binary-search-tree/" 109)
                            ("[Easy] /problems/balanced-binary-tree/" 110)
                            ("[Easy] /problems/minimum-depth-of-binary-tree/" 111)
                            ("[Easy] /problems/path-sum/" 112)
                            ("[Medium] /problems/path-sum-ii/" 113)
                            ("[Medium] /problems/flatten-binary-tree-to-linked-list/" 114)
                            ("[Hard] /problems/distinct-subsequences/" 115)
                            ("[Medium] /problems/populating-next-right-pointers-in-each-node/" 116)
                            ("[Hard] /problems/populating-next-right-pointers-in-each-node-ii/" 117)
                            ("[Easy] /problems/pascals-triangle/" 118)
                            ("[Easy] /problems/pascals-triangle-ii/" 119)
                            ("[Medium] /problems/triangle/" 120)
                            ("[Easy] /problems/best-time-to-buy-and-sell-stock/" 121)
                            ("[Medium] /problems/best-time-to-buy-and-sell-stock-ii/" 122)
                            ("[Hard] /problems/best-time-to-buy-and-sell-stock-iii/" 123)
                            ("[Hard] /problems/binary-tree-maximum-path-sum/" 124)
                            ("[Easy] /problems/valid-palindrome/" 125)
                            ("[Hard] /problems/word-ladder-ii/" 126)
                            ("[Medium] /problems/word-ladder/" 127)
                            ("[Hard] /problems/longest-consecutive-sequence/" 128)
                            ("[Medium] /problems/sum-root-to-leaf-numbers/" 129)
                            ("[Medium] /problems/surrounded-regions/" 130)
                            ("[Medium] /problems/palindrome-partitioning/" 131)
                            ("[Hard] /problems/palindrome-partitioning-ii/" 132)
                            ("[Medium] /problems/clone-graph/" 133)
                            ("[Medium] /problems/gas-station/" 134)
                            ("[Hard] /problems/candy/" 135)
                            ("[Easy] /problems/single-number/" 136)
                            ("[Medium] /problems/single-number-ii/" 137)
                            ("[Hard] /problems/copy-list-with-random-pointer/" 138)
                            ("[Medium] /problems/word-break/" 139)
                            ("[Hard] /problems/word-break-ii/" 140)
                            ("[Easy] /problems/linked-list-cycle/" 141)
                            ("[Medium] /problems/linked-list-cycle-ii/" 142)
                            ("[Medium] /problems/reorder-list/" 143)
                            ("[Medium] /problems/binary-tree-preorder-traversal/" 144)
                            ("[Hard] /problems/binary-tree-postorder-traversal/" 145)
                            ("[Hard] /problems/lru-cache/" 146)
                            ("[Medium] /problems/insertion-sort-list/" 147)
                            ("[Medium] /problems/sort-list/" 148)
                            ("[Hard] /problems/max-points-on-a-line/" 149)
                            ("[Medium] /problems/evaluate-reverse-polish-notation/" 150)
                            ("[Medium] /problems/reverse-words-in-a-string/" 151)
                            ("[Medium] /problems/maximum-product-subarray/" 152)
                            ("[Medium] /problems/find-minimum-in-rotated-sorted-array/" 153)
                            ("[Hard] /problems/find-minimum-in-rotated-sorted-array-ii/" 154)
                            ("[Easy] /problems/min-stack/" 155)
                            ("[Medium] /problems/binary-tree-upside-down/" 156)
                            ("[Easy] /problems/read-n-characters-given-read4/" 157)
                            ("[Hard] /problems/read-n-characters-given-read4-ii-call-multiple-times/" 158)
                            ("[Hard] /problems/longest-substring-with-at-most-two-distinct-characters/" 159)
                            ("[Easy] /problems/intersection-of-two-linked-lists/" 160)
                            ("[Medium] /problems/one-edit-distance/" 161)
                            ("[Medium] /problems/find-peak-element/" 162)
                            ("[Medium] /problems/missing-ranges/" 163)
                            ("[Hard] /problems/maximum-gap/" 164)
                            ("[Easy] /problems/compare-version-numbers/" 165)
                            ("[Medium] /problems/fraction-to-recurring-decimal/" 166)
                            ("[Medium] /problems/two-sum-ii-input-array-is-sorted/" 167)
                            ("[Easy] /problems/excel-sheet-column-title/" 168)
                            ("[Easy] /problems/majority-element/" 169)
                            ("[Easy] /problems/two-sum-iii-data-structure-design/" 170)
                            ("[Easy] /problems/excel-sheet-column-number/" 171)
                            ("[Easy] /problems/factorial-trailing-zeroes/" 172)
                            ("[Medium] /problems/binary-search-tree-iterator/" 173)
                            ("[Hard] /problems/dungeon-game/" 174)
                            ("[Medium] /problems/largest-number/" 179)
                            ("[Medium] /problems/reverse-words-in-a-string-ii/" 186)
                            ("[Medium] /problems/repeated-dna-sequences/" 187)
                            ("[Hard] /problems/best-time-to-buy-and-sell-stock-iv/" 188)
                            ("[Easy] /problems/rotate-array/" 189)
                            ("[Easy] /problems/reverse-bits/" 190)
                            ("[Easy] /problems/number-of-1-bits/" 191)
                            ("[Easy] /problems/house-robber/" 198)
                            ("[Medium] /problems/binary-tree-right-side-view/" 199)
                            ("[Medium] /problems/number-of-islands/" 200)
                            ("[Medium] /problems/bitwise-and-of-numbers-range/" 201)
                            ("[Easy] /problems/happy-number/" 202)
                            ("[Easy] /problems/remove-linked-list-elements/" 203)
                            ("[Easy] /problems/count-primes/" 204)
                            ("[Easy] /problems/isomorphic-strings/" 205)
                            ("[Easy] /problems/reverse-linked-list/" 206)
                            ("[Medium] /problems/course-schedule/" 207)
                            ("[Medium] /problems/implement-trie-prefix-tree/" 208)
                            ("[Medium] /problems/minimum-size-subarray-sum/" 209)
                            ("[Medium] /problems/course-schedule-ii/" 210)
                            ("[Medium] /problems/add-and-search-word-data-structure-design/" 211)
                            ("[Hard] /problems/word-search-ii/" 212)
                            ("[Medium] /problems/house-robber-ii/" 213)
                            ("[Hard] /problems/shortest-palindrome/" 214)
                            ("[Medium] /problems/kth-largest-element-in-an-array/" 215)
                            ("[Medium] /problems/combination-sum-iii/" 216)
                            ("[Easy] /problems/contains-duplicate/" 217)
                            ("[Hard] /problems/the-skyline-problem/" 218)
                            ("[Easy] /problems/contains-duplicate-ii/" 219)
                            ("[Medium] /problems/contains-duplicate-iii/" 220)
                            ("[Medium] /problems/maximal-square/" 221)
                            ("[Medium] /problems/count-complete-tree-nodes/" 222)
                            ("[Easy] /problems/rectangle-area/" 223)
                            ("[Hard] /problems/basic-calculator/" 224)
                            ("[Easy] /problems/implement-stack-using-queues/" 225)
                            ("[Easy] /problems/invert-binary-tree/" 226)
                            ("[Medium] /problems/basic-calculator-ii/" 227)
                            ("[Medium] /problems/summary-ranges/" 228)
                            ("[Medium] /problems/majority-element-ii/" 229)
                            ("[Medium] /problems/kth-smallest-element-in-a-bst/" 230)
                            ("[Easy] /problems/power-of-two/" 231)
                            ("[Easy] /problems/implement-queue-using-stacks/" 232)
                            ("[Hard] /problems/number-of-digit-one/" 233)
                            ("[Easy] /problems/palindrome-linked-list/" 234)
                            ("[Easy] /problems/lowest-common-ancestor-of-a-binary-search-tree/" 235)
                            ("[Medium] /problems/lowest-common-ancestor-of-a-binary-tree/" 236)
                            ("[Easy] /problems/delete-node-in-a-linked-list/" 237)
                            ("[Medium] /problems/product-of-array-except-self/" 238)
                            ("[Hard] /problems/sliding-window-maximum/" 239)
                            ("[Medium] /problems/search-a-2d-matrix-ii/" 240)
                            ("[Medium] /problems/different-ways-to-add-parentheses/" 241)
                            ("[Easy] /problems/valid-anagram/" 242)
                            ("[Easy] /problems/shortest-word-distance/" 243)
                            ("[Medium] /problems/shortest-word-distance-ii/" 244)
                            ("[Medium] /problems/shortest-word-distance-iii/" 245)
                            ("[Easy] /problems/strobogrammatic-number/" 246)
                            ("[Medium] /problems/strobogrammatic-number-ii/" 247)
                            ("[Hard] /problems/strobogrammatic-number-iii/" 248)
                            ("[Easy] /problems/group-shifted-strings/" 249)
                            ("[Medium] /problems/count-univalue-subtrees/" 250)
                            ("[Medium] /problems/flatten-2d-vector/" 251)
                            ("[Easy] /problems/meeting-rooms/" 252)
                            ("[Medium] /problems/meeting-rooms-ii/" 253)
                            ("[Medium] /problems/factor-combinations/" 254)
                            ("[Medium] /problems/verify-preorder-sequence-in-binary-search-tree/" 255)
                            ("[Medium] /problems/paint-house/" 256)
                            ("[Easy] /problems/binary-tree-paths/" 257)
                            ("[Easy] /problems/add-digits/" 258)
                            ("[Medium] /problems/3sum-smaller/" 259)
                            ("[Medium] /problems/single-number-iii/" 260)
                            ("[Medium] /problems/graph-valid-tree/" 261)
                            ("[Easy] /problems/ugly-number/" 263)
                            ("[Medium] /problems/ugly-number-ii/" 264)
                            ("[Hard] /problems/paint-house-ii/" 265)
                            ("[Easy] /problems/palindrome-permutation/" 266)
                            ("[Medium] /problems/palindrome-permutation-ii/" 267)
                            ("[Medium] /problems/missing-number/" 268)
                            ("[Hard] /problems/alien-dictionary/" 269)
                            ("[Easy] /problems/closest-binary-search-tree-value/" 270)
                            ("[Medium] /problems/encode-and-decode-strings/" 271)
                            ("[Hard] /problems/closest-binary-search-tree-value-ii/" 272)
                            ("[Hard] /problems/integer-to-english-words/" 273)
                            ("[Medium] /problems/h-index/" 274)
                            ("[Medium] /problems/h-index-ii/" 275)
                            ("[Easy] /problems/paint-fence/" 276)
                            ("[Medium] /problems/find-the-celebrity/" 277)
                            ("[Easy] /problems/first-bad-version/" 278)
                            ("[Medium] /problems/perfect-squares/" 279)
                            ("[Medium] /problems/wiggle-sort/" 280)
                            ("[Medium] /problems/zigzag-iterator/" 281)
                            ("[Hard] /problems/expression-add-operators/" 282)
                            ("[Easy] /problems/move-zeroes/" 283)
                            ("[Medium] /problems/peeking-iterator/" 284)
                            ("[Medium] /problems/inorder-successor-in-bst/" 285)
                            ("[Medium] /problems/walls-and-gates/" 286)
                            ("[Hard] /problems/find-the-duplicate-number/" 287)
                            ("[Easy] /problems/unique-word-abbreviation/" 288)
                            ("[Medium] /problems/game-of-life/" 289)
                            ("[Easy] /problems/word-pattern/" 290)
                            ("[Hard] /problems/word-pattern-ii/" 291)
                            ("[Easy] /problems/nim-game/" 292)
                            ("[Easy] /problems/flip-game/" 293)
                            ("[Medium] /problems/flip-game-ii/" 294)
                            ("[Hard] /problems/find-median-from-data-stream/" 295)
                            ("[Hard] /problems/best-meeting-point/" 296)
                            ("[Hard] /problems/serialize-and-deserialize-binary-tree/" 297)
                            ("[Medium] /problems/binary-tree-longest-consecutive-sequence/" 298)
                            ("[Easy] /problems/bulls-and-cows/" 299)
                            ("[Medium] /problems/longest-increasing-subsequence/" 300)
                            ("[Hard] /problems/remove-invalid-parentheses/" 301)
                            ("[Hard] /problems/smallest-rectangle-enclosing-black-pixels/" 302)
                            ("[Easy] /problems/range-sum-query-immutable/" 303)
                            ("[Medium] /problems/range-sum-query-2d-immutable/" 304)
                            ("[Hard] /problems/number-of-islands-ii/" 305)
                            ("[Medium] /problems/additive-number/" 306)
                            ("[Medium] /problems/range-sum-query-mutable/" 307)
                            ("[Hard] /problems/range-sum-query-2d-mutable/" 308)
                            ("[Medium] /problems/best-time-to-buy-and-sell-stock-with-cooldown/" 309)
                            ("[Medium] /problems/minimum-height-trees/" 310)
                            ("[Medium] /problems/sparse-matrix-multiplication/" 311)
                            ("[Hard] /problems/burst-balloons/" 312)
                            ("[Medium] /problems/super-ugly-number/" 313)
                            ("[Medium] /problems/binary-tree-vertical-order-traversal/" 314)
                            ("[Hard] /problems/count-of-smaller-numbers-after-self/" 315)
                            ("[Hard] /problems/remove-duplicate-letters/" 316)
                            ("[Hard] /problems/shortest-distance-from-all-buildings/" 317)
                            ("[Medium] /problems/maximum-product-of-word-lengths/" 318)
                            ("[Medium] /problems/bulb-switcher/" 319)
                            ("[Medium] /problems/generalized-abbreviation/" 320)
                            ("[Hard] /problems/create-maximum-number/" 321)
                            ("[Medium] /problems/coin-change/" 322)
                            ("[Medium] /problems/number-of-connected-components-in-an-undirected-graph/" 323)
                            ("[Medium] /problems/wiggle-sort-ii/" 324)
                            ("[Medium] /problems/maximum-size-subarray-sum-equals-k/" 325)
                            ("[Easy] /problems/power-of-three/" 326)
                            ("[Hard] /problems/count-of-range-sum/" 327)
                            ("[Medium] /problems/odd-even-linked-list/" 328)
                            ("[Hard] /problems/longest-increasing-path-in-a-matrix/" 329)
                            ("[Hard] /problems/patching-array/" 330)
                            ("[Medium] /problems/verify-preorder-serialization-of-a-binary-tree/" 331)
                            ("[Medium] /problems/reconstruct-itinerary/" 332)
                            ("[Medium] /problems/largest-bst-subtree/" 333)
                            ("[Medium] /problems/increasing-triplet-subsequence/" 334)
                            ("[Hard] /problems/self-crossing/" 335)
                            ("[Hard] /problems/palindrome-pairs/" 336)
                            ("[Medium] /problems/house-robber-iii/" 337)
                            ("[Medium] /problems/counting-bits/" 338)
                            ("[Easy] /problems/nested-list-weight-sum/" 339)
                            ("[Hard] /problems/longest-substring-with-at-most-k-distinct-characters/" 340)
                            ("[Medium] /problems/flatten-nested-list-iterator/" 341)
                            ("[Easy] /problems/power-of-four/" 342)
                            ("[Medium] /problems/integer-break/" 343)
                            ("[Easy] /problems/reverse-string/" 344)
                            ("[Easy] /problems/reverse-vowels-of-a-string/" 345)
                            ("[Easy] /problems/moving-average-from-data-stream/" 346)
                            ("[Medium] /problems/top-k-frequent-elements/" 347)
                            ("[Medium] /problems/design-tic-tac-toe/" 348)
                            ("[Easy] /problems/intersection-of-two-arrays/" 349)
                            ("[Easy] /problems/intersection-of-two-arrays-ii/" 350)
                            ("[Medium] /problems/android-unlock-patterns/" 351)
                            ("[Hard] /problems/data-stream-as-disjoint-intervals/" 352)
                            ("[Medium] /problems/design-snake-game/" 353)
                            ("[Hard] /problems/russian-doll-envelopes/" 354)
                            ("[Medium] /problems/design-twitter/" 355)
                            ("[Medium] /problems/line-reflection/" 356)
                            ("[Medium] /problems/count-numbers-with-unique-digits/" 357)
                            ("[Hard] /problems/rearrange-string-k-distance-apart/" 358)
                            ("[Easy] /problems/logger-rate-limiter/" 359)
                            ("[Medium] /problems/sort-transformed-array/" 360)
                            ("[Medium] /problems/bomb-enemy/" 361)
                            ("[Medium] /problems/design-hit-counter/" 362)
                            ("[Hard] /problems/max-sum-of-sub-matrix-no-larger-than-k/" 363)
                            ("[Medium] /problems/nested-list-weight-sum-ii/" 364)
                            ("[Medium] /problems/water-and-jug-problem/" 365)
                            ("[Medium] /problems/find-leaves-of-binary-tree/" 366)
                            ("[Medium] /problems/valid-perfect-square/" 367)
                            ("[Medium] /problems/largest-divisible-subset/" 368)
                            ("[Medium] /problems/plus-one-linked-list/" 369)
                            ("[Medium] /problems/range-addition/" 370)
                            ("[Easy] /problems/sum-of-two-integers/" 371)
                            ("[Medium] /problems/super-pow/" 372)
                            ("[Medium] /problems/find-k-pairs-with-smallest-sums/" 373)
                            ("[Easy] /problems/guess-number-higher-or-lower/" 374)
                            ("[Medium] /problems/guess-number-higher-or-lower-ii/" 375)
                            ("[Medium] /problems/wiggle-subsequence/" 376)
                            ("[Medium] /problems/combination-sum-iv/" 377)
                            ("[Medium] /problems/kth-smallest-element-in-a-sorted-matrix/" 378)
                            ("[Medium] /problems/design-phone-directory/" 379)
                            ("[Hard] /problems/insert-delete-getrandom-o1/" 380)
                            ("[Hard] /problems/insert-delete-getrandom-o1-duplicates-allowed/" 381)
                            ("[Medium] /problems/linked-list-random-node/" 382)
                            ("[Easy] /problems/ransom-note/" 383)
                            ("[Medium] /problems/shuffle-an-array/" 384)
                            ("[Medium] /problems/mini-parser/" 385)
                            ("[Medium] /problems/lexicographical-numbers/" 386)
                            ("[Easy] /problems/first-unique-character-in-a-string/" 387)
                            ("[Medium] /problems/longest-absolute-file-path/" 388)
                            ("[Easy] /problems/find-the-difference/" 389)
                            ("[Medium] /problems/elimination-game/" 390)
                            ("[Hard] /problems/perfect-rectangle/" 391)
                            ("[Medium] /problems/is-subsequence/" 392)
                            ("[Medium] /problems/utf-8-validation/" 393)
                            ("[Medium] /problems/decode-string/" 394)
                            ("[Medium] /problems/longest-substring-with-at-least-k-repeating-characters/" 395)
                            ("[Easy] /problems/rotate-function/" 396)
                            ("[Medium] /problems/integer-replacement/" 397)
                            ("[Medium] /problems/random-pick-index/" 398)
                            ("[Medium] /problems/evaluate-division/" 399)
                            ("[Easy] /problems/nth-digit/" 400)
                            ("[Easy] /problems/binary-watch/" 401)
                            ("[Medium] /problems/remove-k-digits/" 402)
                            ("[Hard] /problems/frog-jump/" 403)
                            ("[Easy] /problems/sum-of-left-leaves/" 404)
                            ("[Easy] /problems/convert-a-number-to-hexadecimal/" 405)
                            ("[Medium] /problems/queue-reconstruction-by-height/" 406)
                            ("[Hard] /problems/trapping-rain-water-ii/" 407)
                            ("[Easy] /problems/valid-word-abbreviation/" 408)
                            ("[Easy] /problems/longest-palindrome/" 409)
                            ("[Hard] /problems/split-array-largest-sum/" 410)
                            ("[Hard] /problems/minimum-unique-word-abbreviation/" 411)
                            ("[Easy] /problems/fizz-buzz/" 412)
                            ("[Medium] /problems/arithmetic-slices/" 413)
                            ("[Easy] /problems/third-maximum-number/" 414)
                            ("[Easy] /problems/add-strings/" 415)
                            ("[Medium] /problems/partition-equal-subset-sum/" 416)
                            ("[Medium] /problems/pacific-atlantic-water-flow/" 417)
                            ("[Medium] /problems/sentence-screen-fitting/" 418)
                            ("[Medium] /problems/battleships-in-a-board/" 419)
                            ("[Hard] /problems/strong-password-checker/" 420)
                            ("[Medium] /problems/maximum-xor-of-two-numbers-in-an-array/" 421)
                            ("[Easy] /problems/valid-word-square/" 422)
                            ("[Medium] /problems/reconstruct-original-digits-from-english/" 423)
                            ("[Medium] /problems/longest-repeating-character-replacement/" 424)
                            ("[Hard] /problems/word-squares/" 425)
                            ("[Hard] /problems/all-oone-data-structure/" 432)
                            ("[Easy] /problems/number-of-segments-in-a-string/" 434)
                            ("[Medium] /problems/non-overlapping-intervals/" 435)
                            ("[Medium] /problems/find-right-interval/" 436)
                            ("[Easy] /problems/path-sum-iii/" 437)
                            ("[Easy] /problems/find-all-anagrams-in-a-string/" 438)
                            ("[Medium] /problems/ternary-expression-parser/" 439)
                            ("[Hard] /problems/k-th-smallest-in-lexicographical-order/" 440)
                            ("[Easy] /problems/arranging-coins/" 441)
                            ("[Medium] /problems/sequence-reconstruction/" 444)
                            ("[Hard] /problems/arithmetic-slices-ii-subsequence/" 446)
                            ("[Easy] /problems/number-of-boomerangs/" 447)
                            ("[Medium] /problems/minimum-number-of-arrows-to-burst-balloons/" 452)
                            ("[Easy] /problems/minimum-moves-to-equal-array-elements/" 453)
                            ("[Medium] /problems/4sum-ii/" 454)
                            ("[Easy] /problems/assign-cookies/" 455)
                            ("[Medium] /problems/132-pattern/" 456)
                            ("[Easy] /problems/repeated-substring-pattern/" 459)
                            ("[Medium] /problems/minimum-moves-to-equal-array-elements-ii/" 462)
                            ("[Easy] /problems/island-perimeter/" 463)
                            ("[Medium] /problems/can-i-win/" 464)
                            ("[Hard] /problems/optimal-account-balancing/" 465)
                            ("[Hard] /problems/count-the-repetitions/" 466)
                            ("[Medium] /problems/unique-substrings-in-wraparound-string/" 467)
                            ("[Medium] /problems/validate-ip-address/" 468)
                            ("[Medium] /problems/convex-polygon/" 469)
                            ("[Hard] /problems/encode-string-with-shortest-length/" 471)
                            ("[Medium] /problems/ones-and-zeroes/" 474)
                            ("[Easy] /problems/heaters/" 475)
                            ("[Easy] /problems/number-complement/" 476)
                            )
  )

(defun leetcode--fresh-request ()
  (if (eq request-backend 'url-retrieve)
      (url-cookie-clean-up)
    (when (file-exists-p (request--curl-cookie-jar))
      (delete-file (request--curl-cookie-jar))))
  (request leetcode-base-url
           :sync t
           :headers leetcode-request-header))

(defun leetcode--login (uname pwd)
  (interactive
   (list
    (read-string "input username or email ")
    (read-passwd "input password ")))

  (unless (leetcode--is-loggedin)
    (leetcode--fresh-request)
    (request (concat leetcode-base-url "/" leetcode-action-login)
             :type "POST"
             :data `(("login" . ,uname)
                     ("password" . ,pwd)
                     ;; ("Host" . ,leetcode-base-domain)
                     (,leetcode-csrf-key .
                                         ,(leetcode--get-cookie-val
                                           leetcode-csrf-cookie-key)))
             :headers leetcode-login-request-header)))

(defun leetcode--is-loggedin ()
  "Detect login state by phpsessid"
  (leetcode--get-cookie-val "PHPSESSID"))

(defun leetcode--logout ()
  (interactive)
  (request (concat leetcode-base-url "/" leetcode-action-logout)
           :sync t
           :headers leetcode-request-header))

(defun leetcode--submit
    (content &optional qname qid &key (type "large") (lang leetcode-default-lang))
  (assert (leetcode--is-loggedin) t "login first")
  (unless (and qname qid)
    (let ((quest
           (assoc
            (completing-read "choose quest: " leetcode-quests nil t)
            leetcode-quests )))
      (if quest
          (setq qname (car quest) qid (cadr quest))
        (error "invalid quest"))))

  (request
   (concat
    leetcode-base-url
    (replace-regexp-in-string leetcode-quest-cleaner "" qname)
    "/submit/")
   :type "POST"
   :data `((, leetcode-csrf-key  .
                                 ,(leetcode--get-cookie-val
                                   leetcode-csrf-cookie-key))
           ("lang" . ,lang)
           ("data_input" . "")
           ("question_id" . ,(number-tostring qid))
           ("judge_type" . ,type)
           ("typed_code" . ,content)
           )
   :headers leetcode-request-header
   :parser 'json-read
   :success
   (function* ((lambda (&key data &allow-other-keys)
                 "DOCSTRING"
                 (setq *leetcode-last-submission-id*)
                 (number-to-string
                  (cdr (assoc 'submission_id data))))
               (leetcode--check-submission)))))


(defun leetcode--submit-region (start end)
  (interactive "r")
  (leetcode--submit (buffer-substring start end)))


(defun leetcode--submit-file (file)
  (interactive (list
                (read-file-name
                 "select file: "
                 default-directory
                 (file-name-nondirectory buffer-file-name))))
  (leetcode--submit (leetcode--file-to-string file)))



(defun leetcode--check-submission (&optional sid)
  (assert (leetcode--is-loggedin) t "login first")
  (unless sid
    (setq sid *leetcode-last-submission-id*))
  (request
   (concat leetcode-base-url "/submissions/detail/" sid "/check/")
   :parser 'json-read
   :headers leetcode-request-header
   :success
   (function* (lambda (&key data &allow-other-keys)
                (let ((status-code (cdr (assoc 'status_code data)))
                      (state (cdr (assoc 'state data)))
                      )
                  (if (not (string= state "SUCCESS"))
                      (run-with-idle-timer
                       3
                       nil
                       'leetcode--check-submission)
                    (message (cadr
                              (assoc
                               status-code
                               leetcode-status-map)))))))))

(defun leetcode--parse-code (raw-content)
  (let ((re
         ;; I don't want to do this... but they don't provide me some API
         "acectrl.init(\r?\n?\s*\\(\\[.*,\\]\\),"
         )
        code-str
        code-obj)
    (string-match re raw-content)
    (setq code-str (match-string-no-properties 1 raw-content))
    (with-temp-buffer
      (insert code-str)
      (while (search-backward "'" (point-min) t)
        (replace-match "\""))
      (goto-char 0)
      (setq code-obj (json-read))
      )
    (when (not (stringp code-obj))
      (let ((cpp-entry
             (car (delq nil
                        (mapcar (lambda (entry)
                                  (and
                                   (string= (cdr (assoc 'value entry)) leetcode-default-lang)
                                   entry)) code-obj)))))
        (cdr
         (assoc 'defaultCode cpp-entry))))))


(defun leetcode--parse-info (raw-content)
  "Parse html RAW-CONTENT get info."
  (let ((content-re "<meta name=\"description\" content=\"\\(\[^>\]+\\)\/>")
        (tag-re "<a.*?href=\"/tag/\\(\[^/\]*\\)/\">")
        info
        (tags "\n\ntags: "))

    (save-excursion
      (with-temp-buffer
        (insert raw-content)
        (goto-char (point-min))
        (when (re-search-forward content-re nil t)
          (setq info (match-string-no-properties 1)))

        (while (re-search-forward tag-re nil t)
          (setq tags
                (concat tags " " (match-string-no-properties 1))))))

    (concat info tags)))

(defun leetcode--display-info (qname)
  (interactive
   (list
    (completing-read
     "choose question: "
     leetcode-quests
     nil t)))
  (let* ((data
          (request-response-data
           (request
            (concat leetcode-base-url
                    (replace-regexp-in-string
                     leetcode-quest-cleaner
                     "" qname) "/")
            :parser 'buffer-string
            :headers leetcode-request-header
            :sync t
            )))
         (info (leetcode--parse-info data))
         (start (point));skip default comments
         (end (+ start (length info))))
    (save-excursion
      (goto-char start)
      (insert info)
      (comment-region start end)
      (newline)
                                        ;      (fill-region start (point))
      (when (y-or-n-p "insert code template? ")
        (insert (leetcode--parse-code data))
        (newline)))))

(defun leetcode--show-quests ()
  "Show quests."
  (interactive)
  (completing-read
   "question: "
   leetcode-quests nil t))
